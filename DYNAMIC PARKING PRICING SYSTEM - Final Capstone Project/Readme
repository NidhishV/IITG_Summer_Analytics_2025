Dynamic Parking Pricing System
Project Overview
This project implements a dynamic pricing system for urban parking lots using real-time data analysis and advanced pricing models. The system is designed to optimize parking revenue, improve utilization, and provide actionable analytics for operators. It features interactive dashboards and is ready for deployment in Jupyter notebooks or cloud environments.
Key Features
	•	Three Pricing Models:
	•	Linear Model: Adjusts price based on occupancy.
	•	Demand-Based Model: Incorporates occupancy, queue length, traffic, vehicle type, and special events.
	•	Competitive Model: Uses geographic intelligence and competitor pricing within a 2km radius.
	•	Real-Time Data Processing:
	•	Processes streaming or batch data from multiple parking locations.
	•	Updates prices every 30 minutes based on live conditions.
•	Comprehensive Analytics:
	•	Revenue impact analysis and model comparison.
	•	Hourly and occupancy-based pricing insights.
	•	Vehicle type and traffic condition differentiation.
	•	Interactive Visualization:
	•	Bokeh and Panel dashboards for real-time monitoring.
	•	Plots for hourly pricing, occupancy vs. price, vehicle/traffic impact, and model comparison.
	•	Production-Ready:
	•	Modular Python codebase.
	•	Error handling and CSV export.
	•	Easy integration with existing data pipelines.
How It Works
	1.	Data Ingestion: Loads historical or real-time parking data (occupancy, capacity, vehicle type, traffic, etc.).
	2.	Pricing Engine: Applies selected pricing model to compute optimal prices for each time interval and location.
	3.	Analytics & Reporting: Generates detailed reports on revenue, utilization, and pricing effectiveness.
	4.	Visualization: Displays interactive dashboards for operational and business insights.
Results
	•	Revenue Increase: 15–30% over static pricing, depending on model and scenario.
	•	Peak Hour Optimization: Automatic price adjustments during high-demand periods.
	•	Vehicle & Traffic Sensitivity: Intelligent pricing for different vehicle types and traffic conditions.
Usage
	1.	Place your `dataset.csv` in the project directory.
	2.	Run the provided notebook or script.
	3.	Explore analytics and dashboards in your browser.
Technologies
	•	Python (pandas, numpy, math)
	•	Bokeh and Panel for interactive dashboards
	•	Jupyter Notebook or Google Colab for execution
